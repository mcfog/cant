connect = require \connect
fs = require \fs

config =
    baseUri: '/static' #baseuri used in view
    attachPoint: '/static'

    cdnPrefix: 'cdn'
    localPath: 'static' #find dialectical files here

    expire: 30 #expire time for on-the-fly compiler

module.exports = cant = 
    baseuri:~ ->@config \baseUri
    config: (name, val)->
        switch
        case typeof name is \object
            config<<<name
        case val is undefined
            return config[name]
        default
            config[name] = val
        cant
    register: (mod)->
        mods.push mod
        cant
    use: ->
        for arg of @@
            if typeof arg is \string
                cant.register @Module[arg]
            else
                cant.register arg
        cant

    middleware: ->
        connect do
            connect.router !(app)->
                app.get //#{cant.config \attachPoint}(/.+)$//
                , (req,res,next)->
                    return next! if !req.params || !req.params.0
                    path = req.params.0

                    let mods=^mods then do (err)->
                        me = @@callee
                        mod = mods.shift!
                        return next! if !mod || !mod.pattern

                        re = mod.pattern.0
                        re = if typeof re is \string then //#re// else re
                        match = re.exec path
                        return me! if !match

                        mod.handleRequest path, [req,res,next], me

    cache: !({req, res}, mtime, cb)->
        expire = cant.config \expire
        if expire > 0
            ifs = req.header \If-Modified-Since
            cc = {}
            for [name,val] of (req.header \Cache-Control ?.split /\s*,\s*/ .map ->it.split /\s*=\s*/) || []
                cc[name] = val if name && val 
            return res.writeHead 304 if cc['max-age'] > 0 && ifs && new Date ifs >= mtime
            try
                res.header \Cache-Control, "max-age=#expire"
                res.header \Last-Modified, mtime.toGMTString!
        cb!
    compile: !->
        fs = require \fs
        path = require \path
        walk = (d, cb)->
            @@callee.counter += 1
            files = fs.readdirSync d
            _qwop = !->
                if files.length == 0
                    walk.counter -= 1
                    if walk.counter == 0
                        return cb?!
                    else
                        return
                file = files.shift!
                lpath = path.join d,file .replace //\\//g, '/'
                stat = fs.statSync lpath
                if stat.isDirectory!
                    walk lpath, cb
                    return _qwop!
                if !stat.isFile!
                    return _qwop!
                
                _qwop_mod = !(mod, next)->
                    re = mod.rpattern.0
                    re = if typeof re is \string then //#re// else re
                    return next true if !re.exec lpath

                    (err, data)<~! fs.readFile lpath
                    return next err if err

                    cpath = path.join (cant.config \cdnPrefix), lpath.replace re, mod.rpattern.1

                    (err)<~! (require \mkdirp) path.dirname cpath
                    return next err if err

                    (err, content)<~! mod.handleData data.toString!
                    return next err if err
                    (err)<~! fs.writeFile cpath, content
                    return next err if err
                    next null, true
                
                let mods = ^mods
                    ((err, end)->
                        return if end
                        @@callee.mod = mods.shift!
                        return if !@@callee.mod
                        _qwop_mod @@callee.mod, @@callee
                    ) null
                return _qwop!
            _qwop!
        walk.counter = 0
        <- walk cant.config \localPath

    Module: require \./module

cant.notfound = class
    @prototype = Error::

mods = []
